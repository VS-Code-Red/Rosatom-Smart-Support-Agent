import streamlit as st
from agents.lightweight_classifier import LightweightClassifier
from agents.simple_rag_agent import SimpleRAGAgent
from agents.escalation_agent import EscalationAgent
import os

st.set_page_config(page_title="–ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω—ã–π —Å–∞–ø–ø–æ—Ä—Ç", page_icon="ü§ñ")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –∞–≥–µ–Ω—Ç–æ–≤
@st.cache_resource
def load_models():
    try:
        clf = LightweightClassifier()
        clf.load("models/lightweight_clf.pkl")
        rag_agent = SimpleRAGAgent()
        esc_agent = EscalationAgent(threshold=0.6)
        return clf, rag_agent, esc_agent
    except FileNotFoundError as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python train_model.py")
        st.stop()
    except Exception as e:
        st.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        st.stop()

clf, rag_agent, esc_agent = load_models()

st.title("–ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω—ã–π —Å–∞–ø–ø–æ—Ä—Ç")
st.markdown("–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É")

query = st.text_area("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:", height=150, placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–µ –º–æ–≥—É –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É...")

if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary"):
    if not query.strip():
        st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
    else:
        with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å..."):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                results = clf.predict([query])
                pred, conf = results[0]
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", pred)
                with col2:
                    st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{conf:.2%}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —ç—Å–∫–∞–ª–∞—Ü–∏–∏
                if esc_agent.decide(conf):
                    st.error("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")
                    st.info("–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. "
                           "–í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
                else:
                    st.success("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç (RAG):")
                    answers = rag_agent.retrieve(query)
                    
                    for i, answer in enumerate(answers, 1):
                        with st.expander(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç #{i}", expanded=(i==1)):
                            st.write(answer)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")

