import streamlit as st
from agents.lightweight_classifier import LightweightClassifier
from agents.simple_rag_agent import SimpleRAGAgent
from agents.escalation_agent import EscalationAgent
import os
import pandas as pd
from datetime import datetime

def _log_all_queries(query, category, confidence):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —á–∞—Å—Ç–æ—Ç—ã"""
    os.makedirs("logs", exist_ok=True)
    log_path = "logs/all_queries.csv"
    log_df = pd.DataFrame([{
        "timestamp": datetime.now().isoformat(),
        "query": query,
        "predicted_category": category,
        "confidence": confidence
    }])
    log_df.to_csv(
        log_path,
        mode="a",
        header=not os.path.exists(log_path),
        index=False,
        encoding="utf-8"
    )

def _log_feedback(query, category, confidence, feedback_value):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è self-learning"""
    os.makedirs("logs", exist_ok=True)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤
    feedback_path = "logs/feedback.csv"
    feedback_df = pd.DataFrame([{
        "timestamp": datetime.now().isoformat(),
        "query": query,
        "predicted_category": category,
        "confidence": confidence,
        "feedback": feedback_value,
        "useful": "–î–∞" if feedback_value == 1 else "–ù–µ—Ç"
    }])
    feedback_df.to_csv(
        feedback_path,
        mode="a",
        header=not os.path.exists(feedback_path),
        index=False,
        encoding="utf-8"
    )

    # –ï—Å–ª–∏ –ª–∞–π–∫ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è self-learning
    if feedback_value == 1:
        learned_path = "logs/learned_queries.csv"
        learned_df = pd.DataFrame([{
            "text": query,
            "category": category
        }])
        learned_df.to_csv(
            learned_path,
            mode="a",
            header=not os.path.exists(learned_path),
            index=False,
            encoding="utf-8"
        )

st.set_page_config(page_title="–ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω—ã–π —Å–∞–ø–ø–æ—Ä—Ç", page_icon="ü§ñ")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –∞–≥–µ–Ω—Ç–æ–≤
@st.cache_resource
def load_models():
    try:
        clf = LightweightClassifier()
        clf.load("models/lightweight_clf.pkl")
        rag_agent = SimpleRAGAgent()
        esc_agent = EscalationAgent(threshold=0.6)
        return clf, rag_agent, esc_agent
    except FileNotFoundError as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python train_model.py")
        st.stop()
    except Exception as e:
        st.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        st.stop()

clf, rag_agent, esc_agent = load_models()

st.title("–ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω—ã–π —Å–∞–ø–ø–æ—Ä—Ç")
st.markdown("–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É")

query = st.text_area("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:", height=150, placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–µ –º–æ–≥—É –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É...")

# === –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ ===
if "submitted_query" not in st.session_state:
    st.session_state.submitted_query = None
    st.session_state.results = None
    st.session_state.rag_answers = None
    st.session_state.feedback_logged = False

# –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary"):
    if not query.strip():
        st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
    else:
        with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å..."):
            try:
                results = clf.predict([query])
                pred, conf = results[0]
                
                # –õ–û–ì–ò–†–£–ï–ú –í–°–ï –ó–ê–ü–†–û–°–´ (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞) === 
                _log_all_queries(query, pred, conf)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                st.session_state.submitted_query = query
                st.session_state.results = (pred, conf)
                st.session_state.feedback_logged = False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Å–∫–∞–ª–∞—Ü–∏—é
                if esc_agent.decide(conf):
                    st.session_state.rag_answers = None
                else:
                    answers = rag_agent.retrieve(query)
                    st.session_state.rag_answers = answers

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å) 
if st.session_state.submitted_query is not None:
    pred, conf = st.session_state.results
    
    col1, col2 = st.columns(2)
    with col1:
        st.metric("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", pred)
    with col2:
        st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{conf:.2%}")
    
    if st.session_state.rag_answers is None:
        st.error("–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")
        st.info("–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. "
                "–í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
    else:
        st.success("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç (RAG):")
        for i, answer in enumerate(st.session_state.rag_answers, 1):
            with st.expander(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç #{i}", expanded=(i == 1)):
                st.write(answer)

        # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å 
        if not st.session_state.feedback_logged:
            st.markdown("### –ë—ã–ª –ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª–µ–∑–µ–Ω?")
            col_fb1, col_fb2 = st.columns(2)
            with col_fb1:
                if st.button("üëç –î–∞", key="feedback_positive"):
                    _log_feedback(st.session_state.submitted_query, pred, conf, 1)
                    st.session_state.feedback_logged = True
            with col_fb2:
                if st.button("üëé –ù–µ—Ç", key="feedback_negative"):
                    _log_feedback(st.session_state.submitted_query, pred, conf, 0)
                    st.session_state.feedback_logged = True

        if st.session_state.feedback_logged:
            st.success("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É.")

    
    # –ì–†–ê–§–ò–ö –ß–ê–°–¢–û–¢–´ –ü–†–û–ë–õ–ï–ú –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú 
st.markdown("---")
st.subheader("üìä –ß–∞—Å—Ç–æ—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")

# –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ feedback.csv
try:
    feedback_df = pd.read_csv("logs/feedback.csv", encoding="utf-8")
    category_counts = feedback_df["predicted_category"].value_counts().reset_index()
    category_counts.columns = ["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    import matplotlib.pyplot as plt
    import seaborn as sns

    fig, ax = plt.subplots(figsize=(10, 5))
    sns.barplot(data=category_counts, x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", y="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", palette="viridis", ax=ax)
    ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    ax.set_xlabel("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    plt.xticks(rotation=45)
    st.pyplot(fig)

except FileNotFoundError:
    st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã!")
