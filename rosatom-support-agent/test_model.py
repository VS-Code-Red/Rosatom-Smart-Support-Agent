#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö
"""

import agents
from agents.lightweight_classifier import LightweightClassifier
from agents.simple_rag_agent import SimpleRAGAgent
from agents.escalation_agent import EscalationAgent

def test_model():
    print("=" * 80)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–£–õ–¨–¢–ò–ê–ì–ï–ù–¢–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 80)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –∞–≥–µ–Ω—Ç–æ–≤
    print("\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –∞–≥–µ–Ω—Ç–æ–≤...")
    try:
        clf = LightweightClassifier()
        clf.load("models/lightweight_clf.pkl")
        rag_agent = SimpleRAGAgent()
        esc_agent = EscalationAgent(threshold=0.6)
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    test_cases = [
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è: errors
        ("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É, –Ω–µ –º–æ–≥—É –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", "errors"),
        ("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–¥–∞–µ—Ç error –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", "errors"),
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è: software
        ("–ü—Ä–æ–±–ª–µ–º—ã —Å 1–° –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è", "software"),
        ("SAP –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", "software"),
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è: requests
        ("–ü—Ä–æ—à—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ç–ø—É—Å–∫ —Å 15 –ø–æ 30 —á–∏—Å–ª–∞", "requests"),
        ("–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É —Å—Ä–æ—á–Ω–æ", "requests"),
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è: documents
        ("–î–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –ù–î–° —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏", "documents"),
        ("–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—á–∞—Ç—å—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã", "documents"),
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è: access
        ("–ù–µ –º–æ–≥—É –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, –ø–∞—Ä–æ–ª—å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç", "access"),
        ("–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å MFA –¥–ª—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏", "access"),
        
        # –°–ª–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏
        ("–ù–µ –º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ 1–°, –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É", "errors/software"),
    ]
    
    print("=" * 80)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 80)
    
    correct = 0
    total = len(test_cases)
    escalated = 0
    
    for i, (text, expected_category) in enumerate(test_cases, 1):
        print(f"\nüß™ –¢–µ—Å—Ç {i}/{total}")
        print(f"   –ó–∞–ø—Ä–æ—Å: {text}")
        print(f"   –û–∂–∏–¥–∞–µ–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {expected_category}")
        print("-" * 80)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        results = clf.predict([text])
        pred, conf = results[0]
        
        print(f"   üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {pred}")
        print(f"   üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf:.2%}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏
        is_correct = pred in expected_category or expected_category in pred
        if is_correct:
            print(f"   ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û")
            correct += 1
        else:
            print(f"   ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏
        if esc_agent.decide(conf):
            print(f"   ‚ö†Ô∏è  –≠–°–ö–ê–õ–ê–¶–ò–Ø: –ü–µ—Ä–µ–¥–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å < 60%)")
            escalated += 1
        else:
            print(f"   ‚úÖ –ê–í–¢–û–û–¢–í–ï–¢: –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è...")
            try:
                answers = rag_agent.retrieve(text, top_k=1)
                print(f"   üí¨ –ù–∞–π–¥–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {answers[0][:100]}...")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ RAG: {e}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 80)
    print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}/{total} ({correct/total*100:.1f}%)")
    print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {total-correct}/{total} ({(total-correct)/total*100:.1f}%)")
    print(f"‚ö†Ô∏è  –≠—Å–∫–∞–ª–∞—Ü–∏–π: {escalated}/{total} ({escalated/total*100:.1f}%)")
    
    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    accuracy = correct / total
    print("\n" + "=" * 80)
    print("üéØ –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê")
    print("=" * 80)
    
    if accuracy >= 0.8:
        print("‚úÖ –û–¢–õ–ò–ß–ù–û! –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ")
    elif accuracy >= 0.6:
        print("‚ö†Ô∏è  –•–û–†–û–®–û. –ï—Å—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
    else:
        print("‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –£–õ–£–ß–®–ï–ù–ò–ï. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:")
        print("   - –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("   - –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≤ rules.json")
        print("   - –ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")
    
    if escalated / total > 0.3:
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —ç—Å–∫–∞–ª–∞—Ü–∏–π")
        print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ app.py")
    elif escalated / total < 0.1:
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —ç—Å–∫–∞–ª–∞—Ü–∏–π")
        print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–º–µ–Ω—å—à–∏—Ç–µ –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ app.py")
    else:
        print("\n‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç —ç—Å–∫–∞–ª–∞—Ü–∏–π –æ–ø—Ç–∏–º–∞–ª–µ–Ω (10-30%)")
    
    print("\n" + "=" * 80)
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("=" * 80)

if __name__ == "__main__":
    test_model()
